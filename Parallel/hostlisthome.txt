chell
tango
foxtrot
sierra
methyl


    int ntasks, rank, probab, prob;
    double result;
    int count = 0;
    MPI_Status status;

    double totals[TRIALS/TRIALS_EACH];

    MPI_Comm_size(MPI_COMM_WORLD, &ntasks);

    for (rank = 1; rank < ntasks; rank++){
        prob = (int)floor(count % TRIALS_EACH);

        MPI_Send(&prob, 1, MPI_INT, rank, WORKTAG, MPI_COMM_WORLD);
        count++;
    }

    while (count < TRIALS){
        MPI_Recv(&result, 1, MPI_DOUBLE, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
        MPI_Recv(&probab, 1, MPI_INT, status.MPI_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
        totals[probab] += result;
        prob = floor(count / TRIALS_EACH);
        //printf("%d\n", count);
        MPI_Send(&prob, 1, MPI_INT, status.MPI_SOURCE, WORKTAG, MPI_COMM_WORLD);
        count++;
    }

    for (rank = 1; rank < ntasks; rank++){
        MPI_Recv(&result, 1, MPI_DOUBLE, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
        MPI_Recv(&probab, 1, MPI_INT, status.MPI_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
        totals[probab] += result;
    }

    for (rank = 1; rank < ntasks; rank++){
        MPI_Send(0, 0, MPI_INT, rank, DIETAG, MPI_COMM_WORLD);
    }

    for (count = 0; count < (TRIALS/TRIALS_EACH); count++){
        //printf("%.2f %.2f\n", (double)count/100, (double)totals[count]/100);
    }

    return 0;
